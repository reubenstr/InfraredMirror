#include "Arduino.h"
#include "SPI.h"
#include <Adafruit_MLX90640.h>
#include <Adafruit_NeoPixel.h>

Adafruit_MLX90640 mlx;
float frame[32 * 24]; // buffer for full frame of temperatures 

uint32_t frameBuffer[32 * 24];


// uncomment *one* of the below
//#define PRINT_TEMPERATURES
#define PRINT_ASCIIART

#define PIN_LED_STRIP_GRID 8
#define PIN_LED_STRIP_NAMEPLATE 9
#define PIN_LED_STRIP_MOTION 10



Adafruit_NeoPixel stripGrid = Adafruit_NeoPixel(768, PIN_LED_STRIP_GRID, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel stripNameplate = Adafruit_NeoPixel(12, PIN_LED_STRIP_NAMEPLATE, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel stripMotion = Adafruit_NeoPixel(1, PIN_LED_STRIP_MOTION, NEO_GRB + NEO_KHZ800);

void setup()
{
  //while (!Serial)
  //  delay(10);
  Serial.begin(115200);
  delay(100);

  stripGrid.setBrightness(20);
  stripGrid.begin();
  stripGrid.show();

  stripNameplate.setBrightness(20);
  stripNameplate.begin();
  stripNameplate.show();

  stripMotion.setBrightness(20);
  stripMotion.begin();
  stripMotion.show();

/*
  Serial.println("Adafruit MLX90640 Simple Test");
  if (!mlx.begin(MLX90640_I2CADDR_DEFAULT, &Wire))
  {
    Serial.println("MLX90640 not found!");
    while (1)
      delay(10);
  }

  Serial.println("Found Adafruit MLX90640");

  Serial.print("Serial number: ");
  Serial.print(mlx.serialNumber[0], HEX);
  Serial.print(mlx.serialNumber[1], HEX);
  Serial.println(mlx.serialNumber[2], HEX);

  //mlx.setMode(MLX90640_INTERLEAVED);
  mlx.setMode(MLX90640_CHESS);
  Serial.print("Current mode: ");
  if (mlx.getMode() == MLX90640_CHESS)
  {
    Serial.println("Chess");
  }
  else
  {
    Serial.println("Interleave");
  }

  mlx.setResolution(MLX90640_ADC_18BIT);
  Serial.print("Current resolution: ");
  mlx90640_resolution_t res = mlx.getResolution();
  switch (res)
  {
  case MLX90640_ADC_16BIT:
    Serial.println("16 bit");
    break;
  case MLX90640_ADC_17BIT:
    Serial.println("17 bit");
    break;
  case MLX90640_ADC_18BIT:
    Serial.println("18 bit");
    break;
  case MLX90640_ADC_19BIT:
    Serial.println("19 bit");
    break;
  }

  mlx.setRefreshRate(MLX90640_16_HZ);
  Serial.print("Current frame rate: ");
  mlx90640_refreshrate_t rate = mlx.getRefreshRate();
  switch (rate)
  {
  case MLX90640_0_5_HZ:
    Serial.println("0.5 Hz");
    break;
  case MLX90640_1_HZ:
    Serial.println("1 Hz");
    break;
  case MLX90640_2_HZ:
    Serial.println("2 Hz");
    break;
  case MLX90640_4_HZ:
    Serial.println("4 Hz");
    break;
  case MLX90640_8_HZ:
    Serial.println("8 Hz");
    break;
  case MLX90640_16_HZ:
    Serial.println("16 Hz");
    break;
  case MLX90640_32_HZ:
    Serial.println("32 Hz");
    break;
  case MLX90640_64_HZ:
    Serial.println("64 Hz");
    break;
  }
  */
}

void loop()
{


//delay(10);
  
  static int index = 0;
 
 
 
 stripGrid.setPixelColor(index, stripGrid.Color(0, 0, 0));
 
  index++;
  if (index > stripGrid.numPixels())
  {
    index = 0;
  }

stripGrid.setPixelColor(index, stripGrid.Color(255, 255, 0));
  



  




for (int i = 0; i < stripNameplate.numPixels(); i++)
{
  stripNameplate.setPixelColor(i, stripNameplate.Color(255, 0, 0));
}

stripNameplate.setPixelColor(0, stripGrid.Color(0, 255, 0));
stripNameplate.setPixelColor(1, stripGrid.Color(0, 255, 0));
  


  stripMotion.setPixelColor(0, stripGrid.Color(0, 255, 0));

  stripGrid.show();
  stripNameplate.show();
  stripMotion.show();

/*
  delay(500);
  int ret = mlx.getFrame(frame);
  if (ret != 0)
  {
    Serial.print("Failed: ");
    Serial.println(ret);
    return;
  }

  Serial.print("DATA! ");
  */

  /*
  Serial.println();
  Serial.println();
  for (uint8_t h=0; h<24; h++) {
    for (uint8_t w=0; w<32; w++) {
      float t = frame[h*32 + w];
#ifdef PRINT_TEMPERATURES
      Serial.print(t, 1);
      Serial.print(", ");
#endif
#ifdef PRINT_ASCIIART
      char c = '&';
      if (t < 20) c = ' ';
      else if (t < 23) c = '.';
      else if (t < 25) c = '-';
      else if (t < 27) c = '*';
      else if (t < 29) c = '+';
      else if (t < 31) c = 'x';
      else if (t < 33) c = '%';
      else if (t < 35) c = '#';
      else if (t < 37) c = 'X';
      Serial.print(c);
#endif
    }
    Serial.println();
  }
  */
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85)
  {
    return stripMotion.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if (WheelPos < 170)
  {
    WheelPos -= 85;
    return stripMotion.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return stripMotion.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}